swagger: "2.0"
info:
  description: "COMPOSITION Blockchain API."
  version: "0.9.1"
  title: "COMPOSITION Blockchain API."
  termsOfService: "http://www.composition-project.eu"
  contact:
    email: "composition@cnet.se"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v0_9_1"
schemes:
- "https"
- "http"
produces:
- "application/json"
paths:
  /PublicKeys:
    get:
      tags:
      - "PublicKey"
      summary: "Find PublicKeys by agent and/or company ID"
      description: "Returns a list of PublicKeys"
      operationId: "get_public_key"
      produces:
      - "application/json"
      parameters:
      - name: "agentid"
        in: "query"
        description: "Required to filter PublicKeys by agent."
        required: false
        type: "string"
        default: "false"
        allowEmptyValue: true
      - name: "companyid"
        in: "query"
        description: "Required to filter PublicKeys by company."
        required: false
        type: "string"
        default: "false"
        allowEmptyValue: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PublicKey"
        400:
          description: "Invalid ID supplied"
        404:
          description: "PublicKey not found"
      x-swagger-router-controller: "swagger_server.controllers.public_key_controller"
    post:
      tags:
      - "PublicKey"
      summary: "Add a new PublicKey (to the multichain stream)"
      description: ""
      operationId: "add_public_key"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "PublicKey that should to be added to the blockchain"
        required: true
        schema:
          $ref: "#/definitions/PublicKey"
      responses:
        200:
          description: "OK - PublicKey stored."
          schema:
            $ref: "#/definitions/PublicKey"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.public_key_controller"
  /{agentIdPath}:
    put:
      tags:
      - "Message"
      summary: "Add a new message stream (the agent's multichain stream)"
      description: "Adds a new Message Stream for the agent. This must be performed\
        \ before adding or querying for messages."
      operationId: "add_stream"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "agentIdPath"
        in: "path"
        description: "ID of marketplace agent"
        required: true
        type: "string"
      responses:
        201:
          description: "OK - Stream created."
          schema:
            $ref: "#/definitions/Message"
        400:
          description: "Bad request (includes trying to create duplicate stream)."
      x-swagger-router-controller: "swagger_server.controllers.message_controller"
  /{agentIdPath}/Messages:
    get:
      tags:
      - "Message"
      summary: "Find Messages by agent"
      description: "Returns a list of Messages for this agent"
      operationId: "get_messages"
      produces:
      - "application/json"
      parameters:
      - name: "agentIdPath"
        in: "path"
        description: "ID of marketplace agent"
        required: true
        type: "string"
      - name: "keys"
        in: "query"
        description: "The keys to use as filter."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Message"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
      x-swagger-router-controller: "swagger_server.controllers.message_controller"
    post:
      tags:
      - "Message"
      summary: "Add a new message (to the agent's multichain stream)"
      description: "Adds a new Message "
      operationId: "add_message"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "agentIdPath"
        in: "path"
        description: "ID of marketplace agent"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Message that should to be added to the blockchain"
        required: true
        schema:
          $ref: "#/definitions/Message"
      responses:
        200:
          description: "OK - Message stored."
          schema:
            $ref: "#/definitions/Message"
        400:
          description: "Bad request, ensure that agent stream exists."
      x-swagger-router-controller: "swagger_server.controllers.message_controller"
  /{agentIdPath}/Messages/{messageIdPath}:
    get:
      tags:
      - "Message"
      summary: "Find Message by agent"
      description: "Returns the Message with the given messageId"
      operationId: "get_message"
      produces:
      - "application/json"
      parameters:
      - name: "agentIdPath"
        in: "path"
        description: "ID of marketplace agent"
        required: true
        type: "string"
      - name: "messageIdPath"
        in: "path"
        description: "ID of message"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Message"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
      x-swagger-router-controller: "swagger_server.controllers.message_controller"
definitions:
  ArrayOfKeys:
    type: "array"
    items:
      type: "string"
  PublicKey:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      publicKeyname:
        type: "string"
      companyId:
        type: "string"
      agentId:
        type: "string"
      jwk:
        type: "object"
        description: "JSON Web Key representation of public key."
        properties: {}
    example:
      companyId: "companyId"
      agentId: "agentId"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      publicKeyname: "publicKeyname"
      jwk: "{}"
  Message:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      indexkeys:
        $ref: "#/definitions/ArrayOfKeys"
      payloadType:
        type: "string"
        description: "Type of content. If JSON, found in payloadJSON. If JWT subtype,\
          \ found in payloadJWT."
        enum:
        - "JSON"
        - "JWE"
        - "JWS"
      payloadJSON:
        type: "object"
        properties: {}
      payloadJWT:
        type: "string"
    example:
      payloadJSON: "{}"
      payloadType: "JSON"
      payloadJWT: "payloadJWT"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      indexkeys: ""
parameters:
  agentIdQuery:
    name: "agentid"
    in: "query"
    description: "Required to filter PublicKeys by agent."
    required: false
    type: "string"
    default: "false"
    allowEmptyValue: true
  companyIdQuery:
    name: "companyid"
    in: "query"
    description: "Required to filter PublicKeys by company."
    required: false
    type: "string"
    default: "false"
    allowEmptyValue: true
  agentIdPath:
    name: "agentIdPath"
    in: "path"
    description: "ID of marketplace agent"
    required: true
    type: "string"
  messageIdPath:
    name: "messageIdPath"
    in: "path"
    description: "ID of message"
    required: true
    type: "string"
