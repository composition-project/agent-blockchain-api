# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.array_of_keys import ArrayOfKeys  # noqa: F401,E501
from swagger_server import util


class Message(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, indexkeys: ArrayOfKeys=None, payload_type: str=None, payload_json: object=None, payload_jwt: str=None):  # noqa: E501
        """Message - a model defined in Swagger

        :param id: The id of this Message.  # noqa: E501
        :type id: str
        :param indexkeys: The indexkeys of this Message.  # noqa: E501
        :type indexkeys: ArrayOfKeys
        :param payload_type: The payload_type of this Message.  # noqa: E501
        :type payload_type: str
        :param payload_json: The payload_json of this Message.  # noqa: E501
        :type payload_json: object
        :param payload_jwt: The payload_jwt of this Message.  # noqa: E501
        :type payload_jwt: str
        """
        self.swagger_types = {
            'id': str,
            'indexkeys': ArrayOfKeys,
            'payload_type': str,
            'payload_json': object,
            'payload_jwt': str
        }

        self.attribute_map = {
            'id': 'id',
            'indexkeys': 'indexkeys',
            'payload_type': 'payloadType',
            'payload_json': 'payloadJSON',
            'payload_jwt': 'payloadJWT'
        }

        self._id = id
        self._indexkeys = indexkeys
        self._payload_type = payload_type
        self._payload_json = payload_json
        self._payload_jwt = payload_jwt

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Message.


        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Message.


        :param id: The id of this Message.
        :type id: str
        """

        self._id = id

    @property
    def indexkeys(self) -> ArrayOfKeys:
        """Gets the indexkeys of this Message.


        :return: The indexkeys of this Message.
        :rtype: ArrayOfKeys
        """
        return self._indexkeys

    @indexkeys.setter
    def indexkeys(self, indexkeys: ArrayOfKeys):
        """Sets the indexkeys of this Message.


        :param indexkeys: The indexkeys of this Message.
        :type indexkeys: ArrayOfKeys
        """

        self._indexkeys = indexkeys

    @property
    def payload_type(self) -> str:
        """Gets the payload_type of this Message.

        Type of content. If JSON, found in payloadJSON. If JWT subtype, found in payloadJWT.  # noqa: E501

        :return: The payload_type of this Message.
        :rtype: str
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type: str):
        """Sets the payload_type of this Message.

        Type of content. If JSON, found in payloadJSON. If JWT subtype, found in payloadJWT.  # noqa: E501

        :param payload_type: The payload_type of this Message.
        :type payload_type: str
        """
        allowed_values = ["JSON", "JWE", "JWS"]  # noqa: E501
        if payload_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payload_type` ({0}), must be one of {1}"
                .format(payload_type, allowed_values)
            )

        self._payload_type = payload_type

    @property
    def payload_json(self) -> object:
        """Gets the payload_json of this Message.


        :return: The payload_json of this Message.
        :rtype: object
        """
        return self._payload_json

    @payload_json.setter
    def payload_json(self, payload_json: object):
        """Sets the payload_json of this Message.


        :param payload_json: The payload_json of this Message.
        :type payload_json: object
        """

        self._payload_json = payload_json

    @property
    def payload_jwt(self) -> str:
        """Gets the payload_jwt of this Message.


        :return: The payload_jwt of this Message.
        :rtype: str
        """
        return self._payload_jwt

    @payload_jwt.setter
    def payload_jwt(self, payload_jwt: str):
        """Sets the payload_jwt of this Message.


        :param payload_jwt: The payload_jwt of this Message.
        :type payload_jwt: str
        """

        self._payload_jwt = payload_jwt
